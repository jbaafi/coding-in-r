pfizer$total <- as.numeric(pfizer$total)
#str
str(pfizer)
#summary of pfizer data
summary(pfizer)
$\mu^{null}$
source('~/Documents/Research@MUN/fitting a function to data resources/Predict_using_nls_and_NN.R', echo=TRUE)
16-3.75
16-2.75
16-5.25
16-2.75
16-5.25
16-2.25
16-3.25
16-3.25
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Working directory
setwd("/Users/jbaafi/Documents/coding-in-r/R-worked-examples")
# Load packages
library(GillespieSSA)
library(ssar)
# GILLESPIE SSA WITH TIME-DEPENDENT PARAMETERS
#EXAMPLE 1
#------------------------
#Logistic Growth
set.seed(123)
params     <- c(b=2, d=1, k=1000)
X          <- matrix(c(N=500), nrow = 1)
pfun       <- function(t,X,params){ cbind(params[1] * X[,1],
(params[2] + (params[1]-params[2])*X[,1]/params[3])*X[,1]) }
v          <- matrix( c(+1, -1),ncol=2)
tmin       <- 0
tmax       <- 1
nsim       <- 5
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
# First, we set the seed for the simulation.
set.seed(123)
# Clear workspace
rm(list = ls())
# Working directory
setwd("/Users/jbaafi/Documents/coding-in-r/R-worked-examples")
# First, we set the seed for the simulation.
set.seed(123)
# Initial data must be inputed as a matrix.
X <- matrix(c(N=500), nrow = 1)
#The propensity vector should also be in matrix form:
v <- matrix( c(+1, -1), ncol = 2)
# The propensity scores must also be a matrix-valued function depdendent on 3 parameters:
# time (t), the state of the system (X) and additional parameters (params) which we
# discuss later.
pfun <- function(t,X,params){ cbind(2 * X[, 1], (1 + 1*X[, 1]/1000)*X[, 1]) }
#The model runs automatically from 0 to 1 conducting 10 simulations and generating a plot.
simulation <- ssa(X, pfun, v)
# Plot characteristics can be specified by title, xlab and ylab:
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Logistic Growth: Example 1",
xlab = "Time", ylab = "Individuals")
# Making plots can really slow down the process. The option: plot.sim when set to FALSE
# allows us to keep the data without making any plot:
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20, plot.sim = FALSE)
simulation
# Suppose we are using almost the same model as in the previous example:
set.seed(322)
X <- matrix(c(N=500), nrow = 1)   #Initial values
v <- matrix( c(+1, -1), ncol = 2) #Propensity scores
# But the propensity function now depends on time:
pfun <- function(t,X,params){ cbind(2 * X[, 1],
(2 + sin(t*pi)*X[, 1]/1000)*X[, 1]) }
#Simulation is done in exactly the same manner as previously done. No change needed!
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Time-dependent Logistic Growth: Example2",
xlab = "Time", ylab = "Individuals")
sin(t*pi)
simulation <- ssa(X, pfun, v, maxtime = 2,
title ="Model after 2 seconds: Example 3",
xlab = "Time", ylab = "Value" )
simulation <- ssa(X, pfun, v, maxtime = 2,
title ="Model after 2 seconds: Example 3",
xlab = "Time", ylab = "Value" )
#Simulation is done in exactly the same manner as previously done. No change needed!
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Time-dependent Logistic Growth: Example2",
xlab = "Time", ylab = "Individuals")
#Set seed
set.seed(3289650)
rm(list = ls())
#Set seed
set.seed(3289650)
#Get initial parameters
params     <- c(a = 3, b = 0.01, c = 2)
X          <- matrix(c(100, 100), ncol = 2)
#Propensity function
pfun       <- function(t, X, params){ cbind(params[1]*t*X[,1] + 1,
params[2]*X[,1]*X[,2],
params[3]*X[,2]) }
#Propensity score
v          <- matrix(c(+1,-1,0,0,+1,-1),nrow=2,byrow=TRUE)
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
# Clear workspace
rm(list = ls())
getwd()
# Load packages
library(GillespieSSA)
library(ssar)
# First, we set the seed for the simulation.
set.seed(123)
# Initial data must be inputed as a matrix.
X <- matrix(c(N=500), nrow = 1)
#The propensity vector should also be in matrix form:
v <- matrix( c(+1, -1), ncol = 2)
v
# The propensity scores must also be a matrix-valued function depdendent on 3 parameters:
# time (t), the state of the system (X) and additional parameters (params) which we
# discuss later.
pfun <- function(t,X,params){ cbind(2 * X[, 1],
(1 + 1*X[, 1]/1000)*X[, 1]) }
cbind(2 * X[, 1],
(1 + 1*X[, 1]/1000)*X[, 1])
#The model runs automatically from 0 to 1 conducting 10 simulations and generating a plot.
simulation <- ssa(X, pfun, v)
simulation
# Suppose we are using almost the same model as in the previous example:
set.seed(322)
X <- matrix(c(N=500), nrow = 1)   #Initial values
v <- matrix( c(+1, -1), ncol = 2) #Propensity scores
# But the propensity function now depends on time:
pfun <- function(t,X,params){ cbind(2 * X[, 1],
(2 + sin(t*pi)*X[, 1]/1000)*X[, 1]) }
#Simulation is done in exactly the same manner as previously done. No change needed!
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Time-dependent Logistic Growth: Example2",
xlab = "Time", ylab = "Individuals")
#Set seed
set.seed(3289650)
#Get initial parameters
params <- c(a = 3, b = 0.01, c = 2)
X <- matrix(c(100, 100), ncol = 2)
X
#Propensity score
v <- matrix(c(+1,-1,0,0,+1,-1),nrow=2,byrow=TRUE)
v
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
#Propensity function
pfun <- function(t, X, params){ cbind(params[1]*t*X[,1] + 1,
params[2]*X[,1]*X[,2],
params[3]*X[,2]) }
#Propensity score
v <- matrix(c(+1,-1,0,0,+1,-1),nrow=2,byrow=TRUE)
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
#Simulate
simulation <- ssa(X, pfun, v, params, nsim = 1,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
#Simulate
simulation <- ssa(X, pfun, v, params, nsim = 0,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
#Simulate
simulation <- ssa(X, pfun, v, params, nsim = 1,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
#Simulate
simulation <- ssa(X, pfun, v, params, nsim = 1,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
simulation
simulation
#Simulate
simulation <- ssa(X, pfun, v, params, nsim = 1,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
simulation
#Simulate
simulation <- ssa(X, pfun, v, params, nsim = 0,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
simulation
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
simulation$Time
plot(simulation$Time, simulation$Var1, "l")
plot(simulation$Time, simulation$Var1)
# Save the file
simulation <- ssa(X, pfun, v, params, keep.file = TRUE, fname ="My_simulation.txt",
plot.sim = FALSE)
sim <- read.table("My_simulation.txt",  header = TRUE)
sim
sim
View(sim)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
# Plot with ggplot2
ggplot(data = sim, aes(x = Time, group = as.factor(Simulation))) +
geom_line(aes(y = Var1, color = "Prey")) +
geom_line(aes(y = Var2, color = "Predator")) +
ggtitle("Example 4: Lotka Volterra with ggplot2") +
xlab("Time") + ylab("Individuals") +
scale_color_manual("Creature",
values = c("Prey" = "deepskyblue4","Predator" = "tomato3"))
# Plot with ggplot2
ggplot(data = sim, aes(x = Time, group = as.factor(Simulation))) +
geom_line(aes(y = Var1, color = "Prey")) +
geom_line(aes(y = Var2, color = "Predator")) +
ggtitle("Lotka Volterra with ggplot2") +
xlab("Time") + ylab("Individuals") +
scale_color_manual("Creature",
values = c("Prey" = "deepskyblue4","Predator" = "tomato3"))
cbind(rnorm(1,params[1], params[2])*X[,1] + 1,
runif(1,params[3],params[4])*X[,1]*X[,2],
params[5]*X[,2])
#Set seed
set.seed(3289650)
#Get initial parameters
params     <- c(amu = 3, asd = 0.01, bmin = 0.001, bmax = 0.015, c = 2)
X          <- matrix(c(100, 100), ncol = 2)
#Propensity function
pfun       <- function(t, X, params){ cbind(rnorm(1,params[1], params[2])*X[,1] + 1,
runif(1,params[3],params[4])*X[,1]*X[,2],
params[5]*X[,2]) }
cbind(rnorm(1,params[1], params[2])*X[,1] + 1,
runif(1,params[3],params[4])*X[,1]*X[,2],
params[5]*X[,2])
rnorm(1,params[1], params[2])
runif(1,params[3],params[4])
#Set seed
set.seed(3289650)
#Get initial parameters
params <- c(amu = 3, asd = 0.01, bmin = 0.001, bmax = 0.015, c = 2)
X <- matrix(c(100, 100), ncol = 2)
#Propensity function
pfun <- function(t, X, params){ cbind(rnorm(1,params[1], params[2])*X[,1] + 1,
runif(1,params[3],params[4])*X[,1]*X[,2],
params[5]*X[,2]) }
#Propensity score
v <- matrix(c(+1,-1,0,0,+1,-1),nrow=2,byrow=TRUE)
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 5: Lotka-Volterra with random variables",
xlab = "Time", ylab = "Number of individuals")
#Notice that the random variables in the model can also be time-dependent:
#Propensity function
pfun <- function(t, X, params){
cbind(rnorm(1,t + params[1], params[2])*X[,1] + 1,
runif(1,params[3],params[4])*X[,1]*X[,2], params[5]*X[,2]) }
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 5: Lotka-Volterra with time-dependent random variables",
xlab = "Time", ylab = "Number of individuals")
# ----------------------------------------------------------------------
#EXAMPLE 6
#-----------------------
#Time dependent SIS model
set.seed(123)
#Initial parameters
k <-  24576.5529836797
#Initial parameters
k <- 24576.5529836797
delta <- 0.0591113454895868 + 0.208953907151055
gamma_ct <-  0.391237630231631
params <- c(k = k, delta = delta, gamma_ct = gamma_ct)
X <- matrix(c(S = 1000, I = 40), ncol = 2)
pfun <- function(t, X, params){
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
#Create birth function
lambda     <- function(t){ return(4.328e-4 - (2.538e-7)*t -
(3.189e-7)*sin(2 * t * pi/52) -
(3.812e-7)*cos(2 * t * pi/52) ) }
#Create death function
mu         <- function(t){ return(9.683e-5 + (1.828e-8)*t +
(2.095e-6)*sin(2 * t * pi/52) -
(8.749e-6)*cos(2 * t * pi/52))}
#Create infectives function
beta_fun   <- function(t){ return( 0.479120824267286 +
0.423263042762498*sin(-2.82494252560096 + 2*t*pi/52) )}
#Estimate values
matreturn[,1] <- lambda(t)*(X[,1] + X[,2])
matreturn[,2] <- mu(t)*X[,1]
matreturn[,3] <- beta_fun(t)*X[,1]*X[,2]/(1 + params[1]*X[,2])
matreturn[,4] <- mu(t)*X[,2]
matreturn[,5] <- params[2]*X[,2]
matreturn[,6] <- params[3]*X[,2]
#Return
return(matreturn)
}
v <- matrix(c(1,-1, -1, 0, 0, 1, 0, 0, 1, -1, -1, -1), nrow = 2, byrow = TRUE)
tmin <- 0
tmax <- 0.5
nsim <- 10
#Simulate the values
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = FALSE, kthsave = 1)
#Plot using ggplot2 library
## Not run:
library(ggplot2)
#Plot using ggplot2 library
## Not run:
ggplot(data = simulation, aes(x = Time, y = Var2, group=as.factor(Simulation))) +
geom_line(aes(color = as.factor(Simulation))) + theme_bw() +
theme(legend.position="none") +
ggtitle(paste0("SIS example; Infected cases ", nsim, " simulations")) +
xlab("Time") + ylab("Individuals") +
geom_vline(xintercept = tmax, linetype = 2)
# try this
set.seed(123)
simulation1 <- ssa(X, pfun, v, params, tmin, tmax, nsim = 10, print.time = FALSE,
plot.sim = FALSE, maxiter = 5000, keep.file = TRUE,
fname = "sim1.txt")
set.seed(123)
simulation2 <- ssa(X, pfun, v, params, tmin, tmax, nsim = 10, print.time = FALSE,
plot.sim = FALSE, maxiter = 5000, kthsave = 10, keep.file = TRUE,
fname = "sim2.txt")
ggplot(simulation1, aes(x = Time, y = Var2, group=as.factor(Simulation))) +
geom_point(data = simulation2,
aes(color = "Every 10 values")) +
geom_step(data = simulation1,
aes(color = "All values"), size = 0.5) +
theme(legend.position="none") + theme_bw() +
ggtitle(paste0("SIS example; Infected cases ", 10, " simulations")) +
xlab("Time") + ylab("Individuals")
#Plot using ggplot2 library
ggplot(data = simulation, aes(x = Time, y = Var2, group=as.factor(Simulation))) +
geom_line(aes(color = as.factor(Simulation))) + theme_bw() +
theme(legend.position="none") +
ggtitle(paste0("SIS example; Infected cases ", nsim, " simulations")) +
xlab("Time") + ylab("Individuals") +
geom_vline(xintercept = tmax, linetype = 2)
# ----------------------------------------------------------------------
#EXAMPLE 6
#-----------------------
#Time dependent SIS model
set.seed(123)
#Initial parameters
k <- 24576.5529836797
delta <- 0.0591113454895868 + 0.208953907151055
gamma_ct <-  0.391237630231631
params <- c(k = k, delta = delta, gamma_ct = gamma_ct)
X <- matrix(c(S = 1000, I = 40), ncol = 2)
pfun <- function(t, X, params){
#Value to return
matreturn <- matrix(NA, nrow = length(t), ncol = 6)
#Create birth function
lambda <- function(t){ return(4.328e-4 - (2.538e-7)*t -
(3.189e-7)*sin(2 * t * pi/52) -
(3.812e-7)*cos(2 * t * pi/52) ) }
#Create death function
mu <- function(t){ return(9.683e-5 + (1.828e-8)*t +
(2.095e-6)*sin(2 * t * pi/52) -
(8.749e-6)*cos(2 * t * pi/52))}
#Create infectives function
beta_fun <- function(t){ return( 0.479120824267286 +
0.423263042762498*sin(-2.82494252560096 + 2*t*pi/52) )}
#Estimate values
matreturn[,1] <- lambda(t)*(X[,1] + X[,2])
matreturn[,2] <- mu(t)*X[,1]
matreturn[,3] <- beta_fun(t)*X[,1]*X[,2]/(1 + params[1]*X[,2])
matreturn[,4] <- mu(t)*X[,2]
matreturn[,5] <- params[2]*X[,2]
matreturn[,6] <- params[3]*X[,2]
#Return
return(matreturn)
}
v <- matrix(c(1,-1, -1, 0, 0, 1, 0, 0, 1, -1, -1, -1), nrow = 2, byrow = TRUE)
tmin <- 0
tmax <- 0.5
nsim <- 10
#Simulate the values
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = FALSE, kthsave = 1)
simulation
simulation
v <- matrix(c(1,-1, -1, 0, 0, 1, 0, 0, 1, -1, -1, -1), nrow = 2, byrow = TRUE)
v
matreturn
rm(list = ls())
getwd()
#Import useful packages
library(gapminder)
data("gapminder")
# To view a summary of the data
summary(gapminder)
View(gapminder)
# compute the mean of any quantitative columnn
mean(gapminder$gdpPercap)
# Now doing any operation of the columns works right away by the help of the attach function
median(pop)
# To use the columns without having to call the dataframe and any dollar sign, we use the following
attach(gapminder)
# Now doing any operation of the columns works right away by the help of the attach function
median(pop)
mean(gdpPercap)
hist(lifeExp)
boxplot(lifeExp ~ continent)
hist(lifeExp)
boxplot(lifeExp ~ continent)
boxplot(lifeExp ~ continent)
#load package
library(fitdistrplus)
#generate 50 random values that follow a gamma distribution with shape parameter = 3
#and shape parameter = 10 combined with some gaussian noise
z <- rgamma(50, 3, 10) + rnorm(50, 0, .02)
z
#fit our dataset to a gamma distribution using mle
fit <- fitdist(z, distr = "gamma", method = "mle")
#view the summary of the fit
summary(fit)
#produce plots to visualize the fit
plot(fit)
plot(z)
hist(z)
lines(fit)
4.4+18.4
22.8/2
#Clear workspace
rm(list = ls())
# Created by: Joseph Baafi
# Date: April 29, 2021
# Purpose: To predict mosquito population dynamics in seasonal environment
#Clear workspace
rm(list = ls())
#set working directory
#setwd("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population")
# Import packages into r
library(tidyverse)
library(scales)
library(dplyr)
library(chron)
library(ggplot2)
library(deSolve)
#Import 2011-2016 climate data from Ontario
climate_11 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2011_P1D.csv", header = TRUE)
climate_12 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2012_P1D.csv", header = TRUE)
climate_13 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2013_P1D.csv", header = TRUE)
climate_14 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2014_P1D.csv", header = TRUE)
climate_15 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2015_P1D.csv", header = TRUE)
climate_16 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2016_P1D.csv", header = TRUE)
# To subset the data for the needed columns
climate_df_11 <- climate_11 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_12 <- climate_12 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_13 <- climate_13 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_14 <- climate_14 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_15 <- climate_15 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
climate_df_16 <- climate_16 %>%
select(Station.Name, Year:Day, Mean.Temp...C., Total.Precip..mm.)
# Combine the above data-frames into one data-frame.
climate_df <- rbind(climate_df_11, climate_df_12, climate_df_13, climate_df_14,
climate_df_15, climate_df_16)
# Rename some of the columns of the climate_df to make it simple
climate.df <- climate_df %>%
rename(Mean.Temp = Mean.Temp...C.,
Total.Precip = Total.Precip..mm.
)
# Formatting time data in a form that chron can understand
daily_dates <- dates(paste(climate.df$Month,
climate.df$Day,
climate.df$Year, sep="/"))
climate.df$Chron.Date <-chron(dates=daily_dates,
origin. = c(month = 1,day = 1,
year = 2011)) # setting date into chron
climate.df <- arrange(climate.df, Chron.Date) # ordering dates and adding it to data-frame
start.date <- as.Date("2011-01-01") # The starting date
climate.df$Days.Since.Origin <- (as.numeric(as.Date(climate.df$Chron.Date) - start.date)) # Producing a sequence from smallest to largest
# counting NANs column-wise
sapply(climate.df, function(x) sum(is.na(x)))
# Formating data to exclude the NANs
climate.df<- filter(climate.df, !is.na(Mean.Temp), !is.na(Total.Precip))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_classic()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
# Time series plot of temperature
ggplot(data = climate.df, mapping = aes(x=Chron.Date, y=Mean.Temp))+
geom_line(colour = "steelblue")+
theme_classic()+
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
getwd()
