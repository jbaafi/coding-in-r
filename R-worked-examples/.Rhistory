x <- seq(1, 9)
y <- c(3.297, 5.437, 8.963, 14.778, 24.365, 40.172, 66.231, 109.196, 180.034)
data <- data.frame(x, y)
head(data)
xx <- seq(0, 10)
yy <- 2.45*exp(0.475*xx)
plot(data$x, data$y)
lines(xx, yy, type = "l", col = "red")
getwd()
5.25-1.75
5.5-0.75
5.25-1.75
5.5-2.75
5.5-1.25
5.5-2.75
getwd()
library(swirl)
rm(list = ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
plants$Active_Growth_Period
table(plants$Active_Growth_Period)
str(plants)
0
0
Sys.Date()
mean(c(2, 4, 5))
bye
bye()
swirl()
x <- larv.df.total$temp
78+30+60+60+25
#Clear workspace
rm(list = ls())
#install.packages("rJava")
library("rJava")
#import packages
library(rvest)
library(dplyr)
library(tabulizer)
system("java -version")
#Clear workspace
rm(list = ls())
#install.packages("rJava")
library("rJava")
#import packages
library(rvest)
library(dplyr)
library(tabulizer)
library(tabulizerjars)
# url of the website
site <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
# default call with no parameters changed
matrix_results <- extract_tables(site)
# default call with no parameters changed
matrix_results <- extract_tables(site)
# get back the tables as data frames, keeping their headers
df_results <- extract_tables(site, output = "data.frame", header = TRUE)
site2 <- "http://www.sedl.org/afterschool/toolkits/science/pdf/ast_sci_data_tables_sample.pdf"
# default call with no parameters changed
matrix_results2 <- extract_tables(site2)
# get back the tables as data frames, keeping their headers
df_results2 <- extract_tables(site2, output = "data.frame", header = TRUE)
#Clear workspace
rm(list = ls())
#install.packages("rJava")
library("rJava")
#import packages
library(rvest)
library(dplyr)
library(tabulizer)
library(tabulizerjars)
# url of the website of the data
site <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
# default call with no parameters changed
matrix_results <- extract_tables(site)
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("https://www.acf.hhs.gov/sites/default/files/documents/ocse/fy_2018_annual_report.pdf")
library(pdftools)
library(pdftools)
install.packages("pdftools")
library(plyr)
library(pdftools)
library(plyr)
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("https://www.acf.hhs.gov/sites/default/files/documents/ocse/fy_2018_annual_report.pdf")
# Focus on the table in page 22
pdf_text22 <- strsplit(pdf_text[[22]], "\n")[[1]]
pdf_text22
# Reformat the table using "regular expression"
pdf_text22 <- strsplit(pdf_text22, " {2,100}")
# Convert the table in a data frame
pdf_text22 <- plyr::rbind.fill(lapply(pdf_text22, function(x) as.data.frame(t(matrix(x)))))
pdf_text22
View(pdf_text22)
# Download the pdf file as a variable in R
pdf_text2 <- pdftools::pdf_text("http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf")
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf")
# Focus on the table in page 22
pdf_text <- strsplit(pdf_text, "\n")[[1]]
# Reformat the table using "regular expression"
pdf_text <- strsplit(pdf_text, " {2,100}")
# Convert the table in a data frame
pdf_text <- plyr::rbind.fill(lapply(pdf_text, function(x) as.data.frame(t(matrix(x)))))
View(pdf_text)
# Focus on the table in page 22
pdf_text <- strsplit(pdf_text, "\n")
# Focus on the table in page 22
pdf_text <- strsplit(pdf_text, "\n")[[1]]
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf")
# Focus on the table in page 22
pdf_text <- strsplit(pdf_text, "\n")[[1]]
# Reformat the table using "regular expression"
pdf_text <- strsplit(pdf_text)
# Reformat the table using "regular expression"
pdf_text <- strsplit(pdf_text, " {4,}")
# Convert the table in a data frame
pdf_text <- plyr::rbind.fill(lapply(pdf_text, function(x) as.data.frame(t(matrix(x)))))
View(pdf_text)
# Focus on the table in page 22
pdf_text <- extract_tables(pdf_text)
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("https://www.acf.hhs.gov/sites/default/files/documents/ocse/fy_2018_annual_report.pdf")
# Focus on the table in page 22
pdf_text22 <- strsplit(pdf_text[[22]], "\n")[[1]]
# Reformat the table using "regular expression"
pdf_text22 <- strsplit(pdf_text22, " {2,100}")
# Convert the table in a data frame
pdf_text22 <- plyr::rbind.fill(lapply(pdf_text22, function(x) as.data.frame(t(matrix(x)))))
library(plyr)
url <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
url_table <- pdf_text(url)
file <- pdf_text(url)
file
file <- pdf_text(url, output = "data.frame", header = TRUE)
?pdf_text
file <- pdf_text(file, output = "data.frame", header = TRUE)
file <- pdf_text(url, output = "data.frame", header = TRUE)
#install.packages("rJava")
library(rJava)
#import packages
library(rvest)
library(dplyr)
library(tabulizer)
library(tabulizerjars)
# url of the website of the data
site <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
# default call with no parameters changed
matrix_results <- extract_tables(site)
#Clear workspace
rm(list = ls())
#install.packages("rJava")
library(rJava)
#Clear workspace
rm(list = ls())
#install.packages("rJava")
library(rJava)
library(tabulizer)
library(tidyverse)
# PDF Scrape Tables
endangered_species_scrape <- extract_tables(
file   = "2019-09-23-tabulizer/endangered_species.pdf",
method = "decide",
output = "data.frame")
endangered_species_scrape <- extract_tables(
file   = "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf",
method = "decide",
output = "data.frame")
# PDF Scrape Tables
endangered_species_scrape <- extract_tables(
file   = "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf",
method = "decide",
output = "data.frame")
?extract_tables
link <- "https://www.icnarc.org/DataServices/Attachments/Download/8419d345-c7a1-ea11-9126-00505601089b"
dfr.list <- extract_tables(link, output="data.frame", pages=10:11)
? extract_areas
url <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
file <- locate_areas(url)
view(file())
view(file)
remotes::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"))
PDF Scrape Tables
endangered_species_scrape <- extract_tables(
file   = "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf",
method = "decide",
output = "data.frame")
f <- system.file("examples", "data.pdf", package = "tabulizer")
out1 <- extract_tables(f)
str(out1)
f <- system.file("url", "data.pdf", package = "tabulizer")
out1 <- extract_tables(f)
d <- extract_tables(site, pages=1)
d <- extract_tables("http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf", pages=1)
gpi_table <- extract_tables("http://visionofhumanity.org/app/uploads/2018/06/Global-Peace-Index-2018-2.pdf",
output = "data.frame",
pages = c(10,10,10,11,11),
area = list(
c(496, 38, 786, 169),
c(496, 212, 786, 341),
c(496, 380, 786, 508),
c(496, 392, 738, 521),
c(496, 225, 788, 353)
),
guess = FALSE
)
gpi_table <- extract_tables("http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf",
output = "data.frame",
pages = c(2,3),
guess = FALSE
)
gpi_table <- extract_tables("http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf",
output = "data.frame",
pages = c(2,3),
guess = FALSE
)
?data.table
file <- pdf_data(url)
view(file)
url <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
file <- pdf_data(url)
file
result <- pdf_text(current_path) %>%
# split filecontent by newline character
str_split("\n") %>%
# convert to tibble and assign unique column names
as_tibble(.name_repair = make.names) %>%
# extract the data of each column by position
mutate(
rank = str_sub(X, 0, 5),
movie = str_sub(X, 6, 55),
distributor = str_sub(X, 56, 67),
screens = str_sub(X, 68, 75),
admissions = str_sub(X, 76, 92),
total = str_sub(X, 93)
) %>%
# remove original string
select(-X) %>%
# remove white spaces around values
mutate_all(str_trim)
#Clear workspace
rm(list = ls())
#install.packages("rJava")
library(rJava)
#import packages
#library(rvest)
library(dplyr)
library(tabulizer)
library(tabulizerjars)
library(tidyverse)
# url of the website of the data
site <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
# default call with no parameters changed
matrix_results <- extract_tables(site)
site
extract_tables(site)
# url of the website of the data
site <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
# simple demo file
f <- system.file("site", "data.pdf", package = "tabulizer")
# extract all tables
extract_tables(f)
# simple demo file
f <- system.file("examples", "data.pdf", package = "tabulizer")
# extract all tables
extract_tables(f)
# simple demo file
f <- system.file("examples", "data.pdf", package = "tabulizer")
# extract all tables
extract_tables(f)
# extract tables from only second page
extract_tables(f, pages = 2)
# extract areas from a page
## full table
extract_tables(f, pages = 2, area = list(c(126, 149, 212, 462)))
## part of the table
extract_tables(f, pages = 2, area = list(c(126, 284, 174, 417)))
library(pdftools)
library(plyr)
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("https://www.acf.hhs.gov/sites/default/files/documents/ocse/fy_2018_annual_report.pdf")
# Focus on the table in page 22
pdf_text22 <- strsplit(pdf_text[[22]], "\n")[[1]]
# Reformat the table using "regular expression"
pdf_text22 <- strsplit(pdf_text22, " {2,100}")
# Convert the table in a data frame
pdf_text22 <- plyr::rbind.fill(lapply(pdf_text22, function(x) as.data.frame(t(matrix(x)))))
pdf_text22
url <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
file <- pdf_data(url)
file
# PDF Scrape Tables
endangered_species_scrape <- extract_tables(
file   = "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf",
method = "decide",
output = "data.frame")
if (!require("remotes")) {
install.packages("remotes")
}
# url of the website of the data
site <- "http://www.bccdc.ca/Health-Info-Site/Documents/public-exposures-flights-tables-Archived-2020.pdf"
# default call with no parameters changed
matrix_results <- extract_tables(site)
?extract_tables
# simple demo file
f <- system.file("examples", "data.pdf", package = "tabulizer")
# extract all tables
extract_tables(f)
library(tidyverse)
library(rJava)
f <- system.file("examples", "data.pdf", package = "tabulizer")
# extract all tables
extract_tables(f)
# Download the pdf file as a variable in R
pdf_text <- pdftools::pdf_text("https://www.acf.hhs.gov/sites/default/files/documents/ocse/fy_2018_annual_report.pdf")
# Focus on the table in page 22
pdf_text22 <- strsplit(pdf_text[[22]], "\n")[[1]]
pdf_text22
# Reformat the table using "regular expression"
pdf_text22 <- strsplit(pdf_text22, " {2,100}")
# Convert the table in a data frame
pdf_text22 <- plyr::rbind.fill(lapply(pdf_text22, function(x) as.data.frame(t(matrix(x)))))
pdf_text22
1569/(12*4)
1569/(12)
130.75/4
list.files()
20*09
20*0.9
20*(1-0.1)
?sample
sample(1:10, 5, replace = FALSE)
sample(1:10, 5, replace = TRUE)
?rexp
dexp(1)
dexp(2)
dexp(1:3)
865-890
890-865
550+40+275
2021-1988
12+9+4+7
32+10+ 10+3+10+7
18*72
x
rm(list = ls())
x <- seq(-10, 10, by = .1)
y <- dnorm(x, mean = 2.5, sd = 0.5)
plot(x, y)
plot(x, y, type = "l")
y <- dnorm(x, mean = 0, sd = 2)
plot(x, y, type = "l")
sd(x)
mean(x)
?sd
?Lognormal
x <- 805.91
y <- 12.64 + 78 + 0.63 + 123 + 139.35 + 22.5 + 42.61
x-y
b <- 7 + 14.75 + 14.50
cost <- x-y
cost
cost <- cost + b
b
cost
cost + 78
208*24
2008.54*2
4017.08*24
208.54*24
208.54*2*24
84/12
136.58*2*84
# clear workspace
rm(list=ls())
# Using the dplyr package in r
# This is a practice session from online material that I found very useful.
library(readr)
library(dplyr)
# Load data
pfizer <- read_csv("/Users/jbaafi/Google Drive/My Drive/week7/pfizer.csv")
fda <- read_csv("/Users/jbaafi/Google Drive/My Drive/week7/fda.csv")
View(pfizer)
View(pfizer)
# view the structure of data
str(pfizer)
str(fda)
# convert total column in pfizer to a numeric variable
pfizer$total <- as.numeric(pfizer$total)
#str
str(pfizer)
#summary of pfizer data
summary(pfizer)
$\mu^{null}$
source('~/Documents/Research@MUN/fitting a function to data resources/Predict_using_nls_and_NN.R', echo=TRUE)
16-3.75
16-2.75
16-5.25
16-2.75
16-5.25
16-2.25
16-3.25
16-3.25
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Working directory
setwd("/Users/jbaafi/Documents/coding-in-r/R-worked-examples")
# Load packages
library(GillespieSSA)
library(ssar)
# GILLESPIE SSA WITH TIME-DEPENDENT PARAMETERS
#EXAMPLE 1
#------------------------
#Logistic Growth
set.seed(123)
params     <- c(b=2, d=1, k=1000)
X          <- matrix(c(N=500), nrow = 1)
pfun       <- function(t,X,params){ cbind(params[1] * X[,1],
(params[2] + (params[1]-params[2])*X[,1]/params[3])*X[,1]) }
v          <- matrix( c(+1, -1),ncol=2)
tmin       <- 0
tmax       <- 1
nsim       <- 5
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
simulation <- ssa(xinit=X, pfun=pfun, v=v, params=params, tmin=tmin, tmax=tmax, nsim=nsim,
title = "Logistic Growth example", xlab = "Time", ylab = "N")
# First, we set the seed for the simulation.
set.seed(123)
# Clear workspace
rm(list = ls())
# Working directory
setwd("/Users/jbaafi/Documents/coding-in-r/R-worked-examples")
# First, we set the seed for the simulation.
set.seed(123)
# Initial data must be inputed as a matrix.
X <- matrix(c(N=500), nrow = 1)
#The propensity vector should also be in matrix form:
v <- matrix( c(+1, -1), ncol = 2)
# The propensity scores must also be a matrix-valued function depdendent on 3 parameters:
# time (t), the state of the system (X) and additional parameters (params) which we
# discuss later.
pfun <- function(t,X,params){ cbind(2 * X[, 1], (1 + 1*X[, 1]/1000)*X[, 1]) }
#The model runs automatically from 0 to 1 conducting 10 simulations and generating a plot.
simulation <- ssa(X, pfun, v)
# Plot characteristics can be specified by title, xlab and ylab:
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Logistic Growth: Example 1",
xlab = "Time", ylab = "Individuals")
# Making plots can really slow down the process. The option: plot.sim when set to FALSE
# allows us to keep the data without making any plot:
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20, plot.sim = FALSE)
simulation
# Suppose we are using almost the same model as in the previous example:
set.seed(322)
X <- matrix(c(N=500), nrow = 1)   #Initial values
v <- matrix( c(+1, -1), ncol = 2) #Propensity scores
# But the propensity function now depends on time:
pfun <- function(t,X,params){ cbind(2 * X[, 1],
(2 + sin(t*pi)*X[, 1]/1000)*X[, 1]) }
#Simulation is done in exactly the same manner as previously done. No change needed!
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Time-dependent Logistic Growth: Example2",
xlab = "Time", ylab = "Individuals")
sin(t*pi)
simulation <- ssa(X, pfun, v, maxtime = 2,
title ="Model after 2 seconds: Example 3",
xlab = "Time", ylab = "Value" )
simulation <- ssa(X, pfun, v, maxtime = 2,
title ="Model after 2 seconds: Example 3",
xlab = "Time", ylab = "Value" )
#Simulation is done in exactly the same manner as previously done. No change needed!
simulation <- ssa(X, pfun, v, tmin = 2, tmax = 10, nsim = 20,
title = "Time-dependent Logistic Growth: Example2",
xlab = "Time", ylab = "Individuals")
#Set seed
set.seed(3289650)
rm(list = ls())
#Set seed
set.seed(3289650)
#Get initial parameters
params     <- c(a = 3, b = 0.01, c = 2)
X          <- matrix(c(100, 100), ncol = 2)
#Propensity function
pfun       <- function(t, X, params){ cbind(params[1]*t*X[,1] + 1,
params[2]*X[,1]*X[,2],
params[3]*X[,2]) }
#Propensity score
v          <- matrix(c(+1,-1,0,0,+1,-1),nrow=2,byrow=TRUE)
#Simulate
simulation <- ssa(X, pfun, v, params,
title = "Example 4: Time-dependent Lotka-Volterra",
xlab = "Time", ylab = "Number of individuals")
