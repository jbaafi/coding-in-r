func=pop.model,
y=xstart,
times=times,
parms=parms
) %>%
as.data.frame() -> out
# Plot the results
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='number of individuals')
times <- seq(from=0,to=60/365,by=1/365/4)
# Initial comditions
xstart <- c(S=999,I=1,R=0)
# Solve the system and save it in a dataframe
ode(
func=pop.model,
y=xstart,
times=times,
parms=parms
) %>%
as.data.frame() -> out
# Plot the results
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='number of individuals')
times <- seq(from=0,to=60/365)
# Initial comditions
xstart <- c(S=999,I=1,R=0)
# Solve the system and save it in a dataframe
ode(
func=pop.model,
y=xstart,
times=times,
parms=parms
) %>%
as.data.frame() -> out
times <- seq(from=0,to=60/365)
# Initial comditions
xstart <- c(S=999,I=1,R=0)
# Solve the system and save it in a dataframe
ode(
func=pop.model,
y=xstart,
times=times,
parms=parms
) %>%
as.data.frame() -> out
times <- seq(from=0,to=60/365,by=1/365/4)
# Initial comditions
xstart <- c(S=999,I=1,R=0)
# Solve the system and save it in a dataframe
ode(
func=pop.model,
y=xstart,
times=times,
parms=parms
) %>%
as.data.frame() -> out
# Plot the results
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='number of individuals')
# Clear workspace
rm(list = ls())
dev.off()
# Clear workspace
rm(list = ls())
# Define the ODE system
pop.model <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
recruitment    <- q  * b * phi * Adult
exit   <- delta_A + mu_A * Aquatic
Adult_entry <- delta_A * Aquatic
Adult_exit <- mu_M * Adult
dAquatic        <- recruitment - exit
dAdult    <- Adult_entry - Adult_exit
return(list(c(dAquatic, dAdult)))
})
}
pars  <- c(q   = 0.5,    # /day, rate of ingestion
b  = 100,    # /day, growth rate of prey
phi  = 3.32 ,   # /day, mortality rate of predator
delta_A = 0.22,    # -, assimilation efficiency
mu_A = 0.47,
mu_M = 0.1)     # mmol/m3, carrying capacity
yini  <- c(Aquatic = 1, Adult = 2)
yini  <- c(Aquatic = 10, Adult = 10)
times <- seq(0, 100)
out   <- ode(yini, times, pop.model, pars)
summary(out)
yini  <- c(Aquatic = 10, Adult = 10)
times <- seq(0, 100)
out   <- ode(yini, times, pop.model, pars)
summary(out)
## Default plot method
plot(out)
R0 <- (q*phi*delta_A)/mu_M*(delta_A + mu_A)
q   = 0.5   # /day, rate of ingestion
b  = 100   # /day, growth rate of prey
phi  = 3.32   # /day, mortality rate of predator
delta_A = 0.2   # -, assimilation efficiency
mu_A = 0.47
mu_M = 0.1
R0 <- (q*phi*delta_A)/mu_M*(delta_A + mu_A)
R0
rm(list = ls())
dev.off()
# Model parameters
q   = 0.5
b  = 100
phi  = 3.32
delta_A = 0.2
mu_A = 0.47
mu_M = 0.1
parameters <- c(q, b, phi, delta_A, mu_A, mu_M)
# Function for the system of equations
pop.model <- function(t, y, ...){
# The number of aquatic mosquitoes
E = y[1]
# The number of Matured (Adult) mosquitoes
A = y[2]
# The system of equations
dE <- q*b*phi*A - (delta_A + mu_A)*E
dA <- delta_A*E - mu_A*A
return(list(c(dE, dA)))
}
#Initial conditions
y0 <- c(100, 10)
#time steps
times <- seq(0, 100, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = t, parms = parameters)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
View(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size",
main = "Population Dynamics")
lines(out$X2, col = "red")
#time steps
times <- seq(0, 150, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size",
main = "Population Dynamics")
lines(out$X2, col = "red")
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
# Vector reproduction numbers
R0 <- (q*phi*delta_A)/mu_M*(delta_A + mu_A)
R0
q   = 0.5
b  = 100
phi  = 3.32
delta_A = 0.55
mu_A = 0.47
mu_M = 0.1
parameters <- c(q, b, phi, delta_A, mu_A, mu_M)
# Vector reproduction numbers
#R0 <- (q*phi*delta_A)/mu_M*(delta_A + mu_A)
#Initial conditions
y0 <- c(100, 10)
#time steps
times <- seq(0, 150, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
# Clear workspace
rm(list = ls())
# Load packages
pacman::p_load(pacman, deSolve, tidyverse)
# Define a function for the system of equations
pop.model <- function(t, y, ...){
# The number of aquatic mosquitoes
E = y[1]
# The number of Matured (Adult) mosquitoes
A = y[2]
# The system of equations
dE <- q*b*phi*A - (delta_E + mu_E)*E
dA <- delta_E*E - mu_A*A
return(list(c(dE, dA)))
}
# Model parameters
q   = 0.5
b  = 100
phi  = 3.32
delta_E = 0.55
mu_E = 0.47
mu_A = 0.1
parameters <- c(q, b, phi, delta_E, mu_E, mu_A)
#Initial conditions
y0 <- c(100, 10)
#time steps
times <- seq(0, 150, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
View(out)
# Model parameters
q   = 0.5
b  = 100
phi  = 3.32
delta_E = 0.3
mu_E = 0.4
mu_A = 0.1
parameters <- c(q, b, phi, delta_E, mu_E, mu_A)
#Initial conditions
y0 <- c(100, 10)
#time steps
times <- seq(0, 150, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
#time steps
times <- seq(0, 5, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
#time steps
times <- seq(0, 3, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
#time steps
times <- seq(0, 2, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
#Initial conditions
y0 <- c(100, 100)
#time steps
times <- seq(0, 2, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
# Clear workspace
rm(list = ls())
# Define a function for the system of equations
pop.model <- function(t, y, ...){
# The number of states
E = y[1]
L = y[2]
P = y[3]
A = y[4]
# The system of equations
dE <- b*(1-A/k)*A - (F_E + mu_E)*E
dL <- F_E*E - (F_L + mu_L + delta_L*L)*L
dP <- F_L*L - (F_P + mu_P)*P
dA <- sigma*F_P*P - mu_A*A
return(list(c(dE, dL, dP, dA)))
}
# Model parameters
b  = 10.7
k = 10^6
F_E = 0.4
mu_E = 0.36
F_L = 0.14
mu_L = 0.34
delta_L = 0.01
F_P = 0.3
mu_P = 0.17
sigma = 0.5
mu_A = 0.05
# Vector reproduction numbers
R0 <- b*sigma*F_E*F_L*F_P/(mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)
R0
b*sigma*F_E*F_L*F_P
(mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)
0.08988/0.171456
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P))
R0
# Model parameters
b  = 10.7
k = 10^6
F_E = 0.4
mu_E = 0.36
F_L = 0.14
mu_L = 0.34
delta_L = 0.01
F_P = 0.3
mu_P = 0.17
sigma = 0.5
mu_A = 0.05
parameters <- c(b, k, F_E, mu_E, F_L, mu_L, delta_L, F_P, mu_P, sigma, mu_A)
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P))
R0
# Model parameters
b  = 10.7
k = 10^6
F_E = 0.4
mu_E = 0.36
F_L = 0.14
mu_L = 0.34
delta_L = 0.01
F_P = 0.3
mu_P = 0.17
sigma = 0.5
mu_A = 0.05
parameters <- c(b, k, F_E, mu_E, F_L, mu_L, delta_L, F_P, mu_P, sigma, mu_A)
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P))
R0
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)*mu_A)
R0
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/(mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)*mu_A
R0
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/(mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)*mu_A
R0
# Vector reproduction numbers
R0 <- (b*sigma*F_E*F_L*F_P)/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)*mu_A)
R0
# Vector reproduction numbers
R0 <- b*sigma*F_E*F_L*F_P/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)*mu_A)
R0
# Vector reproduction numbers
R0 <- b*sigma*F_E*F_L*F_P/((mu_E+F_E)*(mu_L+F_L)*(mu_P+F_P)*mu_A)
R0
#Initial conditions
y0 <- c(100, 0, 0, 100)
#time steps
times <- seq(0, 100, by = 0.01)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
View(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "green")
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "green")
#time steps
times <- seq(0, 100)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "green")
#time steps
times <- seq(0, 50)
# Numerical integration.
out <-  ode(y = y0, func = pop.model, times = times, parms = parameters)
out <- data.frame(out)
plot(out$time, out$X1, type = "l", xlab = "Time (days)", ylab = "Stage size")
lines(out$X2, col = "red")
lines(out$X3, col = "blue")
lines(out$X4, col = "green")
=======
xlab("Time (Days)")+
ylab("Mean Temperature")+
theme(axis.text.x=element_text(angle=45, hjust=1))
getwd()
# Clear workspace
rm(list = ls())
# Load packages
pacman::p_load(deSolve)
?ode
# Define the model
closed.sir.model <- function (t, x, params) {
## first extract the state variables
S <- x[1]
I <- x[2]
R <- x[3]
## now extract the parameters
beta <- params["beta"]
gamma <- params["gamma"]
N <- S+I+R
## now code the model equations
dSdt <- -beta*S*I/N
dIdt <- beta*S*I/N-gamma*I
dRdt <- gamma*I
## combine results into a single vector
dxdt <- c(dSdt,dIdt,dRdt)
## return result as a list!
list(dxdt)
}
## combine results into a single vector
dxdt <- c(dSdt,dIdt,dRdt)
## return result as a list!
list(dxdt)
# Define the model
closed.sir.model <- function (t, x, params) {
## first extract the state variables
S <- x[1]
I <- x[2]
R <- x[3]
## now extract the parameters
beta <- params["beta"]
gamma <- params["gamma"]
N <- S+I+R
## now code the model equations
dSdt <- -beta*S*I/N
dIdt <- beta*S*I/N-gamma*I
dRdt <- gamma*I
## combine results into a single vector
dxdt <- c(dSdt,dIdt,dRdt)
## return result as a list!
list(dxdt)
}
# Define the model
closed.sir.model <- function (t, x, params) {
## first extract the state variables
S <- x[1]
I <- x[2]
R <- x[3]
## now extract the parameters
beta <- params["beta"]
gamma <- params["gamma"]
N <- S+I+R
## now code the model equations
dSdt <- -beta*S*I/N
dIdt <- beta*S*I/N-gamma*I
dRdt <- gamma*I
## combine results into a single vector
dxdt <- c(dSdt,dIdt,dRdt)
## return result as a list!
list(dxdt)
}
# Clear workspace
rm(list = ls())
# Load packages
pacman::p_load(deSolve, tidyverse)
# Define the model
closed.sir.model <- function (t, x, params) {
## first extract the state variables
S <- x[1]
I <- x[2]
R <- x[3]
## now extract the parameters
beta <- params["beta"]
gamma <- params["gamma"]
N <- S+I+R
## now code the model equations
dSdt <- -beta*S*I/N
dIdt <- beta*S*I/N-gamma*I
dRdt <- gamma*I
## combine results into a single vector
dxdt <- c(dSdt,dIdt,dRdt)
## return result as a list!
list(dxdt)
}
# values for the parameters
parms <- c(beta=400,gamma=365/13)
# the times at which we want solutions
times <- seq(from=0,to=60/365,by=1/365/4)
# the initial conditions
xstart <- c(S=999,I=1,R=0)
# we compute a model trajectory and store the result in a data-frame:
ode(
func=closed.sir.model,
y=xstart,
times=times,
parms=parms
) %>%
as.data.frame() -> out
#  plot the results
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='number of individuals')
out
plot(out$time, out$S)
plot(out$time, out$S, type = "l")
plot(out$time, out$S, type = "l", col = "red")
plot(out$time, out$S, type = "l", col = "red", lwd = 4)
times <- seq(from=0,to=60/365,by=1/365/4)
times
#  plot the results
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='number of individuals')
>>>>>>> 378dd8b0e49759f02a78098229bb462334bd6776
